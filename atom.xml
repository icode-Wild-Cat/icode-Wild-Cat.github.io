<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DodgeWildCat&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-07T11:37:57.133Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swagger2</title>
    <link href="http://example.com/2023/03/07/Swagger2/"/>
    <id>http://example.com/2023/03/07/Swagger2/</id>
    <published>2023-03-07T05:41:17.597Z</published>
    <updated>2023-03-07T11:37:57.133Z</updated>
    
    <content type="html"><![CDATA[<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务的接口文档。</p><p>目前的项目基本都是前后端分离，后端为前端提供接口的同时，还需同时提供接口的说明文档。但我们的代码总是会根据实际情况来实时更新，这个时候有可能会忘记更新接口的说明文档，造成一些不必要的问题。</p><p>用人话说，swagger就是帮你写接口说明文档的。</p><p><a href="https://blog.csdn.net/yuanchun05/article/details/127114008">参考博客</a></p><span id="more"></span><h2 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h2><h3 id="1-前后端分离的项目"><a href="#1-前后端分离的项目" class="headerlink" title="1.前后端分离的项目"></a>1.前后端分离的项目</h3><p>前后端分离式开发<br>在这里插入图片描述:<br><img src="/images/c47123560c614b23bd5707bf42b689e3.png" alt="c47123560c614b23bd5707bf42b689e3.png"><br>纯粹后端的java开发人员,不编写页面代码, 只需要写接口( 这里的接口不是java中的interface )<br>在SpringMVC的控制层Controller类的方法里, 不写转页( 包括 内部转, 重定向 ),<br>都是通过 @ResponseBody, 返回JSON格式的数据<br>所以 Controller 类上的注解由@Controller, 改为 @RestController ( @Controller + @ResponseBody )</p><h3 id="2-什么是接口"><a href="#2-什么是接口" class="headerlink" title="2.什么是接口"></a>2.什么是接口</h3><p>接口就是制定一个协议, 给前端开发人员调用后端功能的参考. 可能包括的内容 :</p><table><thead><tr><th>协议</th><th>介绍</th></tr></thead><tbody><tr><td>http 还是 https</td><td>https请求需要SSL证书</td></tr><tr><td>请求名</td><td>url 或者 uri</td></tr><tr><td>请求方式</td><td>get, post, put, delete等等</td></tr><tr><td>参数列表</td><td>包括类型和传值方式</td></tr><tr><td>返回类型</td><td>返回格式, 状态码, 错误消息, 数据</td></tr></tbody></table><h3 id="3-举例说明"><a href="#3-举例说明" class="headerlink" title="3.举例说明"></a>3.举例说明</h3><p>例如:</p><p>模块名称: 用户登录</p><p>请求方式: post</p><p>请求名: &#x2F;login&#x2F;auth</p><p>参数</p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>是否必须</th></tr></thead><tbody><tr><td>username</td><td>String(20)</td><td>用户名</td><td>是</td></tr><tr><td>password</td><td>String(20)</td><td>密码</td><td>是</td></tr><tr><td>remember</td><td>Interger</td><td>记住我, 1-记住,0-不记住, 默认按0处理</td><td>否</td></tr></tbody></table><p>返回:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    code<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    msg<span class="punctuation">:</span> &#x27;success&#x27;<span class="punctuation">,</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        userId<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        userName<span class="punctuation">:</span> 王小二<span class="punctuation">,</span></span><br><span class="line">        sex<span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    code<span class="punctuation">:</span> <span class="number">1001</span><span class="punctuation">,</span></span><br><span class="line">    msg<span class="punctuation">:</span> &#x27;用户名不能为空&#x27;<span class="punctuation">,</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果是由后端人员来维护这些信息, 有个非常大的缺点, </p><p>就是如果对这个方法做了修改, 例如添加了一个新的参数, 则需要修改这个接口文档.</p><p>基于这个缺点, 诞生了一个技术, 接口文档自动生成工具-swagger</p><p>即, 整个接口文档内容, 不需要手动编写了, 而是通过程序自动生成</p><h3 id="4-返回JSON格式"><a href="#4-返回JSON格式" class="headerlink" title="4.返回JSON格式"></a>4.返回JSON格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">// 数字代码 如: 成功 200;</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">// &quot;错误描述&quot;</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">// 数据 &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="number">200</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="number">500</span>, <span class="string">&quot;未知异常，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="number">500</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        r.code = code;</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">data</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        r.data = data;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把map里key为data的数据转换成某个类型的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeReference</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getData</span><span class="params">(TypeReference&lt;T&gt; typeReference)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="built_in">this</span>.getData();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> JSON.parseObject(json, typeReference);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getData</span><span class="params">(String key, TypeReference&lt;T&gt; typeReference)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="built_in">this</span>.getData();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> JSON.parseObject(json, typeReference);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最少包含三个属性，可以很多</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    code<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span><span class="comment">//数字代码</span></span><br><span class="line">    msg<span class="punctuation">:</span> <span class="comment">//错误描述,</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="comment">//数据</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Swagger2的使用"><a href="#Swagger2的使用" class="headerlink" title="Swagger2的使用"></a>Swagger2的使用</h2><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-加入配置类"><a href="#2-加入配置类" class="headerlink" title="2.加入配置类"></a>2.加入配置类</h3><p>主要配置Swagger2注解的扫描路径</p><p>次要配置一些说明信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.yuan&quot;</span>))    <span class="comment">//这个是重点</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;接口文档标题&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;文档内容描述&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.....&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-开启Swagger2"><a href="#3-开启Swagger2" class="headerlink" title="3.开启Swagger2"></a>3.开启Swagger2</h3><p>在配置类上添加 @EnableSwagger2 注解 </p><h2 id="使用Swagger2的注解"><a href="#使用Swagger2的注解" class="headerlink" title="使用Swagger2的注解"></a>使用Swagger2的注解</h2><p>api 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>， 用于类，标识这个类是Swagger的资源类</span><br><span class="line"><span class="meta">@ApiIgnore</span>， 用于类，忽略该Controller，指不对当前类做扫描</span><br><span class="line"><span class="meta">@ApiOperation</span>， 用于方法，描述Controller类中的method接口</span><br><span class="line"><span class="meta">@ApiParam</span>， 用于参数，单个参数描述，与<span class="meta">@ApiImplicitParam</span>不同的是，它是写在参数左侧,<span class="meta">@ApiParam(name=&quot;username&quot;,value=&quot;用户名&quot;)</span>String username</span><br><span class="line"><span class="meta">@ApiModel</span>,  用于类，标识对类进行说明，用于参数用实体类接收</span><br><span class="line"><span class="meta">@ApiProperty</span>：        用于方法，字段，表示对model属性的说明或者数据操作更改</span><br><span class="line"><span class="meta">@ApiModelProperty</span></span><br><span class="line"><span class="meta">@ApiImplicitParam</span>：   *用于方法，表示单独的请求参数</span><br><span class="line"><span class="meta">@ApiImplicitParams</span>：  *用于方法，包含多个 <span class="meta">@ApiImplicitParam</span></span><br><span class="line"><span class="meta">@ApiResponse</span>：        用于方法，描述单个出参信息</span><br><span class="line"><span class="meta">@ApiResponses</span>：       用于方法，包含多个<span class="meta">@ApiResponse</span></span><br><span class="line"><span class="meta">@ApiError</span>：           用于方法，接口错误所返回的信息</span><br></pre></td></tr></table></figure><p>swagger不会参与业务开发，和业务代码是完全解耦的，没有任何耦合</p><p>原始代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/user/login1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login1</span><span class="params">(String userName, String password)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userName = &quot;</span> + userName);</span><br><span class="line">        System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swagger的注解只是给你的类，方法，参数，属性添加注解而已</p><h3 id="1-给控制层添加注释"><a href="#1-给控制层添加注释" class="headerlink" title="1.给控制层添加注释"></a>1.给控制层添加注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;用户管理&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="2-给控制层的方法添加中文注释"><a href="#2-给控制层的方法添加中文注释" class="headerlink" title="2.给控制层的方法添加中文注释"></a>2.给控制层的方法添加中文注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOpeeration(value = &quot;方法名称&quot;,tags = &quot;分组标记-与 @Api的tags属性对应&quot;,notes = &quot;方法说明&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;用户登录1&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="3-给参数注释"><a href="#3-给参数注释" class="headerlink" title="3.给参数注释"></a>3.给参数注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">       @ApiImplicitParam(name = &quot;userName&quot;, value = &quot;账号&quot;, required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="4-隐藏一个参数，用-ApiIgnore"><a href="#4-隐藏一个参数，用-ApiIgnore" class="headerlink" title="4.隐藏一个参数，用@ApiIgnore"></a>4.隐藏一个参数，用@ApiIgnore</h3><h3 id="5-添加完成"><a href="#5-添加完成" class="headerlink" title="5.添加完成"></a>5.添加完成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户登录1&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;userName&quot;, value = &quot;账号&quot;, required = true)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/user/login1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login1</span><span class="params">(String userName, <span class="meta">@ApiIgnore</span> String password)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userName = &quot;</span> + userName);</span><br><span class="line">        System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户登录2&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/user/login2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login2</span><span class="params">( <span class="meta">@ApiParam(name = &quot;userName&quot;, value = &quot;账号&quot;, required = true)</span> String userName</span></span><br><span class="line"><span class="params">            , <span class="meta">@ApiIgnore</span> String password)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userName = &quot;</span> + userName);</span><br><span class="line">        System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-给类里的属性添加注释"><a href="#6-给类里的属性添加注释" class="headerlink" title="6.给类里的属性添加注释"></a>6.给类里的属性添加注释</h3><h4 id="6-1给类加一个注解"><a href="#6-1给类加一个注解" class="headerlink" title="6.1给类加一个注解"></a>6.1给类加一个注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUser</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2给属性添加注解"><a href="#6-2给属性添加注解" class="headerlink" title="6.2给属性添加注解"></a>6.2给属性添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="meta">@ApiModelProperty(hidden = true)</span>  <span class="comment">//隐藏属性</span></span><br><span class="line">    <span class="keyword">private</span> Integer userStatus;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;账号&quot;, required = true)</span><span class="comment">//设置参数注释</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h2><h3 id="0-RestFul是一种网络应用程序的设计风格和开发方式"><a href="#0-RestFul是一种网络应用程序的设计风格和开发方式" class="headerlink" title="0.RestFul是一种网络应用程序的设计风格和开发方式"></a>0.RestFul是一种网络应用程序的设计风格和开发方式</h3><p>REST（英文：<strong>Representational State Transfer</strong>，简称REST）描述了一个架构样式的网络系统，比如web应用程序。</p><p>通过 get 查询；post 添加；put 修改；delete 删除</p><h3 id="1-选择请求方式"><a href="#1-选择请求方式" class="headerlink" title="1.选择请求方式"></a>1.选择请求方式</h3><p>在接口系统里，不要只写@RequestMapping(value&#x3D;”&#x2F;user&#x2F;{id}”)，同时要指明请求方式method</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/query&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/query&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/query&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/query&quot;, method = RequestMethod.PATCH)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/query&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @GetMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="comment">//    @PostMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="comment">//    @PutMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="comment">//    @PatchMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="comment">//    @DeleteMapping(&quot;/query&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="2-1-传统方式接值-方式"><a href="#2-1-传统方式接值-方式" class="headerlink" title="2.1.传统方式接值 方式"></a>2.1.传统方式接值 方式</h3><p>SpringMVC 路径 传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL?param=value</span><br></pre></td></tr></table></figure><p>接值</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务的接口文档。&lt;/p&gt;
&lt;p&gt;目前的项目基本都是前后端分离，后端为前端提供接口的同时，还需同时提供接口的说明文档。但我们的代码总是会根据实际情况来实时更新，这个时候有可能会忘记更新接口的说明文档，造成一些不必要的问题。&lt;/p&gt;
&lt;p&gt;用人话说，swagger就是帮你写接口说明文档的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yuanchun05/article/details/127114008&quot;&gt;参考博客&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity</title>
    <link href="http://example.com/2023/03/06/SpringSecurity/"/>
    <id>http://example.com/2023/03/06/SpringSecurity/</id>
    <published>2023-03-06T06:54:32.382Z</published>
    <updated>2023-03-07T12:17:11.383Z</updated>
    
    <content type="html"><![CDATA[<p>SpringSecurity基于Spring，提供了一套Web应用安全性的完整解决方案。<br>你可能的关系关于安全方面的两个重要区域是“认证”和“授权”（或者访问控制），一般来说，web应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分，也是SpringSecurity重要核心功能。</p><span id="more"></span><ol><li>用户认证：验证某一个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。通俗将就是系统认为用户是否能登录。</li><li>用户授权：验证某个用户是否有权限执行某一操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每一个角色则对应一系列的权限。通俗讲就是系统判断用户是否有权限去做某些事情。</li></ol><h3 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h3><p><img src="/images/image-20230306155215753.png" alt="image-20230306155215753"></p><h3 id="权限管理中的相关概念"><a href="#权限管理中的相关概念" class="headerlink" title="权限管理中的相关概念"></a>权限管理中的相关概念</h3><ol><li><p>主体（principal）</p><p>使用系统的用户或设备或从其他系统远程登录的用户等等。简单说就是谁使用系统谁就是主体。。</p></li><li><p>认证（authentication）</p><p>权限管理系统确认一个主体的身份，允许主体进入系统。简单说就是“主体”证明自己是谁。</p><p>笼统的认为就是以前所做的登录操作</p></li><li><p>授权（authorization）</p><p>将系统的“权力”授予“主体”，这样主体就具备了系统中特定功能了。</p><p>简单讲就是，授权就是给用户分配权限。</p></li></ol><h3 id="SpringSecurity基本原理"><a href="#SpringSecurity基本原理" class="headerlink" title="SpringSecurity基本原理"></a>SpringSecurity基本原理</h3><p>本质是一个过滤器链：</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringSecurity基于Spring，提供了一套Web应用安全性的完整解决方案。&lt;br&gt;你可能的关系关于安全方面的两个重要区域是“认证”和“授权”（或者访问控制），一般来说，web应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分，也是SpringSecurity重要核心功能。&lt;/p&gt;</summary>
    
    
    
    <category term="back-end" scheme="http://example.com/categories/back-end/"/>
    
    
    <category term="Spring全家桶" scheme="http://example.com/tags/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>PLC_pdf</title>
    <link href="http://example.com/2023/03/06/plc/"/>
    <id>http://example.com/2023/03/06/plc/</id>
    <published>2023-03-06T06:22:56.004Z</published>
    <updated>2023-03-07T12:16:40.369Z</updated>
    
    <content type="html"><![CDATA[<p>本博客收录了三菱FX系列的一些手册，以便随时随地查阅。</p><span id="more"></span><h3 id="FX2n中文指令编程手册"><a href="#FX2n中文指令编程手册" class="headerlink" title="FX2n中文指令编程手册"></a>FX2n中文指令编程手册</h3><div class="row">    <embed src="/pdf/FX2n中文指令编程手册.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="FX入门篇"><a href="#FX入门篇" class="headerlink" title="FX入门篇"></a>FX入门篇</h3><div class="row">    <embed src="/pdf/FX入门篇.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="FX软元件"><a href="#FX软元件" class="headerlink" title="FX软元件"></a>FX软元件</h3><div class="row">    <embed src="/pdf/FX软元件.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="ST结构文本Q"><a href="#ST结构文本Q" class="headerlink" title="ST结构文本Q"></a>ST结构文本Q</h3><div class="row">    <embed src="/pdf/ST结构文本Q.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本博客收录了三菱FX系列的一些手册，以便随时随地查阅。&lt;/p&gt;</summary>
    
    
    
    <category term="mech" scheme="http://example.com/categories/mech/"/>
    
    
    <category term="PLC" scheme="http://example.com/tags/PLC/"/>
    
  </entry>
  
  <entry>
    <title>JWT解读与使用</title>
    <link href="http://example.com/2023/03/05/JWT/"/>
    <id>http://example.com/2023/03/05/JWT/</id>
    <published>2023-03-05T13:34:46.347Z</published>
    <updated>2023-03-07T12:16:19.293Z</updated>
    
    <content type="html"><![CDATA[<p>JWT（JSON web Token）目前最流行的跨域身份验证解决方案</p><ul><li>流行</li><li>安全</li><li>稳定</li><li>易用</li><li>支持JSON</li></ul><span id="more"></span><h2 id="跨域身份验证"><a href="#跨域身份验证" class="headerlink" title="跨域身份验证"></a>跨域身份验证</h2><p>Internet服务无法与用户身份验证分开。</p><p>一般的：</p><ol><li><p>用户向服务器发送用户名和密码</p></li><li><p>验证服务器后，相关数据（如用户角色，登录时间等）将保存在当前会话中</p></li><li><p>服务器向用户返回session_id，session信息都会写入到用户的Cookie。</p></li><li><p>用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。</p></li><li><p>服务器收到session_id并对比之前保存的数据，确认用户的身份。</p></li></ol><p><img src="/images/30174042_63d7909aec5f788413.webp" alt="30174042_63d7909aec5f788413.webp"></p><p>这种模式最大的问题是，没有分布式架构，无法支持横向扩展。如果使用一个服务器，该模式完全没有问题。但是，如果它是服务器群集或面向服务的跨域体系结构的话，则需要一个统一的session数据库库来保存会话数据实现共享，这样负载均衡下的每个服务器才可以正确的验证用户身份。</p><p>例如，举一个实际中常见的单点登陆的需求：站点A和站点B提供同一公司的相关服务。现在要求用户只需要登录其中一个网站，然后它就会自动登录到另一个网站。怎么做？</p><p>一种解决方案是听过持久化session数据，写入数据库或文件持久层等。收到请求后，验证服务从持久层请求数据。该解决方案的优点在于架构清晰，而缺点是架构修改比较费劲，整个服务的验证逻辑层都需要重写，工作量相对较大。而且由于依赖于持久层的数据库或者问题系统，会有单点风险，如果持久层失败，整个认证体系都会挂掉。</p><p><img src="/images/30174043_63d7909b0720589037.webp" alt="30174043_63d7909b0720589037.webp"></p><h2 id="JWT的原则"><a href="#JWT的原则" class="headerlink" title="JWT的原则"></a>JWT的原则</h2><p>原则：在服务器身份验证之后，将生成一个JSON对象并将其发送回用户</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Role&quot;</span><span class="punctuation">:</span><span class="string">&quot;Admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Expire&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-3-5 22:04:28&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后，当用户与浏览器通信时，客户在请求中发回JSON对象。服务器仅依赖于这个JSON对象来标记用户。为了防止用户篡改数据，服务器将在生成对象时添加签名。</p><p>服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。</p><h2 id="JWT的数据结构"><a href="#JWT的数据结构" class="headerlink" title="JWT的数据结构"></a>JWT的数据结构</h2><p>典型的：改对象为一个很长的字符串，字符之间通过 “ . ”分割为三个子串。</p><p>注意：JWT对象为一个长字串，各子串之间也没有换行符。</p><p>每一个子串表示一个功能块：JWT头、有效载荷、签名 </p><p><img src="/images/JWT%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.webp" alt="30174043_63d7909b0ca6171543"></p><h3 id="JWT头"><a href="#JWT头" class="headerlink" title="JWT头"></a>JWT头</h3><p>描述JWT元数据的JSON对象：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span><span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span><span class="comment">//表示签名使用的算法，默认为HS256</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;JWT&quot;</span><span class="comment">//表示令牌的类型，JWT令牌统一写为JWT</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</p><h3 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h3><p>JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。</p><p>JWT指定七个默认字段供选择：</p><ol><li>iss：发行人</li><li>exp：到期时间</li><li>sub：主题</li><li>aud：用户</li><li>nbf：在此之前不可以</li><li>iat：发布时间</li><li>jtl：JWT ID用于标识该JWT</li></ol><p>除了以上字段外，我们还可以自定义私有字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄漏。</p><p>JSON对象也使用Base64 URL算法转换为字符串存。</p><h2 id="JWT的用法"><a href="#JWT的用法" class="headerlink" title="JWT的用法"></a>JWT的用法</h2><p>客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中</p><p>此后，客户端将在与服务器交互中会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域，因此一般将它放入HTTP请求的Header Authorization字段中。</p><p>Authorization：Bearer</p><p>当跨域时，也可以将JWT被放置于POST请求的数据主体中。</p><h2 id="JWT问题和趋势"><a href="#JWT问题和趋势" class="headerlink" title="JWT问题和趋势"></a>JWT问题和趋势</h2><ol><li>JWT默认不加密，但可以加密。生成原始令牌后，可以使用改令牌再次进行加密。</li><li>当JWT未加密方法时，一些私密数据无法通过JWT传输</li><li>JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。</li><li>JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。</li><li>JWT本身包含认证信息，因此一旦信息泄漏，任何人都可以获取令牌的所有权限，为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行身份验证。</li><li>为了减少被盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</li></ol><h2 id="JWT的基本使用"><a href="#JWT的基本使用" class="headerlink" title="JWT的基本使用"></a>JWT的基本使用</h2><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> yui.ui.web.sys.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * APP登录Token的生成和解析</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** token秘钥，请勿泄露，请勿随便修改 backups:JKKLJOoasdlfj */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;JKKLJOoasdlfj&quot;</span>;</span><br><span class="line">    <span class="comment">/** token 过期时间: 10天 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">calendarField</span> <span class="operator">=</span> Calendar.DATE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">calendarInterval</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT生成Token.&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * JWT构成: header, payload, signature</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user_id</span></span><br><span class="line"><span class="comment">     *            登录成功后用户user_id, 参数user_id不可传空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Long user_id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">iatDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">// expire time</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">nowTime</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        nowTime.add(calendarField, calendarInterval);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiresDate</span> <span class="operator">=</span> nowTime.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// header Map</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build token</span></span><br><span class="line">        <span class="comment">// param backups &#123;iss:Service, aud:APP&#125;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create().withHeader(map) <span class="comment">// header</span></span><br><span class="line">                .withClaim(<span class="string">&quot;iss&quot;</span>, <span class="string">&quot;Service&quot;</span>) <span class="comment">// payload</span></span><br><span class="line">                .withClaim(<span class="string">&quot;aud&quot;</span>, <span class="string">&quot;APP&quot;</span>).withClaim(<span class="string">&quot;user_id&quot;</span>, <span class="literal">null</span> == user_id ? <span class="literal">null</span> : user_id.toString())</span><br><span class="line">                .withIssuedAt(iatDate) <span class="comment">// sign time</span></span><br><span class="line">                .withExpiresAt(expiresDate) <span class="comment">// expire time</span></span><br><span class="line">                .sign(Algorithm.HMAC256(SECRET)); <span class="comment">// signature</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密Token</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Claim&gt; <span class="title function_">verifyToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(SECRET)).build();</span><br><span class="line">            jwt = verifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            <span class="comment">// token 校验失败, 抛出Token验证非法异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jwt.getClaims();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Token获取user_id</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user_id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getAppUID</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        Map&lt;String, Claim&gt; claims = verifyToken(token);</span><br><span class="line">        <span class="type">Claim</span> <span class="variable">user_id_claim</span> <span class="operator">=</span> claims.get(<span class="string">&quot;user_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == user_id_claim || StringUtils.isEmpty(user_id_claim.asString())) &#123;</span><br><span class="line">            <span class="comment">// token 校验失败, 抛出Token验证非法异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(user_id_claim.asString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终存放的数据在JWT内部的实体claims里，它是存放数据的地方。</p><h2 id="JJWT"><a href="#JJWT" class="headerlink" title="JJWT"></a>JJWT</h2><p>它是为了更友好在JVM上使用JWT，是基于JWT，JWS，JWE，JWK框架的java实现。</p><p>参考：<a href="https://github.com/jwtk/jwwt">github地址</a></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建JwtConstants类，用于token的chaims保存有效信息字段名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> finals <span class="type">String</span> <span class="variable">JWT_KEY_USER_ID</span> <span class="operator">=</span> <span class="string">&quot;uid&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建JwtInfo类，用于token的chaims保存有效信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtInfo</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUid</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建JwtTokenUtils工具类，用于token的生成和解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yibo.user.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jws;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.DatatypeConverter;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 生成token的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Key <span class="title function_">getKeyInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">byte</span>[] bytes = DatatypeConverter.parseBase64Binary(<span class="string">&quot;mall-user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(bytes,signatureAlgorithm.getJcaName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generatorToken</span><span class="params">(JwtInfo jwtInfo,<span class="type">int</span> expire)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder().claim(JwtConstants.JWT_KEY_USER_ID,jwtInfo.getUid())</span><br><span class="line">                .setExpiration(DateTime.now().plusSeconds(expire).toDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,getKeyInstance()).compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取token中的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JwtInfo <span class="title function_">getTokenInfo</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(token);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtInfo</span>(claims.get(JwtConstants.JWT_KEY_USER_ID).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建JwtTokenService服务类，调用其方法即可进行认证和授权使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">expire</span> <span class="operator">=</span> <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generatorToken</span><span class="params">(JwtInfo jwtInfo)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JwtTokenUtils.generatorToken(jwtInfo,expire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JwtInfo <span class="title function_">stringInfoFromToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JwtTokenUtils.getTokenInfo(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此JWT的具体使用详细介绍完毕，在项目中建议使用JJWT，因为其API友好。</p><p>上面将token中的载荷放在chaims中，其实chaims是JWT内部维持的一个存放有效信息的地方，不论使用任何API，最终都使用chaims保存信息。<br>setClaims有2个重载:</p><ul><li>JwtBuilder setClaims(Claims claims);</li><li>JwtBuilder setClaims(Map&lt;String, Object&gt; claims);</li></ul><p>不能就是说，我们也可以直接传入map值对象。</p><h2 id="扩展阅读-："><a href="#扩展阅读-：" class="headerlink" title="扩展阅读 ："></a>扩展阅读 ：</h2><p>签发的用户认证token超时刷新策略： <a href="https://blog.csdn.net/sinat_25235033/article/details/80324006">https://blog.csdn.net/sinat_25235033/article/details/80324006</a></p><p>讲真，别再使用JWT了： <a href="https://www.jianshu.com/p/af8360b83a9f">https://www.jianshu.com/p/af8360b83a9f</a></p><p>参考：<br> <a href="https://blog.csdn.net/achenyuan/article/details/80829401">https://blog.csdn.net/achenyuan/article/details/80829401</a></p><p><a href="https://www.cnblogs.com/zaixiuxing/p/6005968.html">https://www.cnblogs.com/zaixiuxing/p/6005968.html</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;JWT（JSON web Token）目前最流行的跨域身份验证解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流行&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;稳定&lt;/li&gt;
&lt;li&gt;易用&lt;/li&gt;
&lt;li&gt;支持JSON&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="back-end" scheme="http://example.com/categories/back-end/"/>
    
    
    <category term="JWT" scheme="http://example.com/tags/JWT/"/>
    
  </entry>
  
</feed>
