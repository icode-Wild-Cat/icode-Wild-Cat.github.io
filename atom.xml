<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DodgeWildCat&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-06T06:40:37.279Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PLC_pdf</title>
    <link href="http://example.com/2023/03/06/plc/"/>
    <id>http://example.com/2023/03/06/plc/</id>
    <published>2023-03-06T06:22:56.004Z</published>
    <updated>2023-03-06T06:40:37.279Z</updated>
    
    <content type="html"><![CDATA[<p>本博客收录了三菱FX系列的一些手册，以便随时随地查阅。</p><span id="more"></span><div class="row">    <embed src="/pdf/FX2n中文指令编程手册.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/FX入门篇.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/FX软元件.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/ST结构文本Q.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本博客收录了三菱FX系列的一些手册，以便随时随地查阅。&lt;/p&gt;</summary>
    
    
    
    
    <category term="PLC" scheme="http://example.com/tags/PLC/"/>
    
  </entry>
  
  <entry>
    <title>JWT解读与使用</title>
    <link href="http://example.com/2023/03/05/JWT/"/>
    <id>http://example.com/2023/03/05/JWT/</id>
    <published>2023-03-05T13:34:46.347Z</published>
    <updated>2023-03-06T06:01:11.988Z</updated>
    
    <content type="html"><![CDATA[<p>JWT（JSON web Token）目前最流行的跨域身份验证解决方案</p><ul><li>流行</li><li>安全</li><li>稳定</li><li>易用</li><li>支持JSON</li></ul><span id="more"></span><h2 id="跨域身份验证"><a href="#跨域身份验证" class="headerlink" title="跨域身份验证"></a>跨域身份验证</h2><p>Internet服务无法与用户身份验证分开。</p><p>一般的：</p><ol><li><p>用户向服务器发送用户名和密码</p></li><li><p>验证服务器后，相关数据（如用户角色，登录时间等）将保存在当前会话中</p></li><li><p>服务器向用户返回session_id，session信息都会写入到用户的Cookie。</p></li><li><p>用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。</p></li><li><p>服务器收到session_id并对比之前保存的数据，确认用户的身份。</p></li></ol><p><img src="/images/30174042_63d7909aec5f788413.webp" alt="30174042_63d7909aec5f788413.webp"></p><p>这种模式最大的问题是，没有分布式架构，无法支持横向扩展。如果使用一个服务器，该模式完全没有问题。但是，如果它是服务器群集或面向服务的跨域体系结构的话，则需要一个统一的session数据库库来保存会话数据实现共享，这样负载均衡下的每个服务器才可以正确的验证用户身份。</p><p>例如，举一个实际中常见的单点登陆的需求：站点A和站点B提供同一公司的相关服务。现在要求用户只需要登录其中一个网站，然后它就会自动登录到另一个网站。怎么做？</p><p>一种解决方案是听过持久化session数据，写入数据库或文件持久层等。收到请求后，验证服务从持久层请求数据。该解决方案的优点在于架构清晰，而缺点是架构修改比较费劲，整个服务的验证逻辑层都需要重写，工作量相对较大。而且由于依赖于持久层的数据库或者问题系统，会有单点风险，如果持久层失败，整个认证体系都会挂掉。</p><p><img src="/images/30174043_63d7909b0720589037.webp" alt="30174043_63d7909b0720589037.webp"></p><h2 id="JWT的原则"><a href="#JWT的原则" class="headerlink" title="JWT的原则"></a>JWT的原则</h2><p>原则：在服务器身份验证之后，将生成一个JSON对象并将其发送回用户</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Role&quot;</span><span class="punctuation">:</span><span class="string">&quot;Admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Expire&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-3-5 22:04:28&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后，当用户与浏览器通信时，客户在请求中发回JSON对象。服务器仅依赖于这个JSON对象来标记用户。为了防止用户篡改数据，服务器将在生成对象时添加签名。</p><p>服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。</p><h2 id="JWT的数据结构"><a href="#JWT的数据结构" class="headerlink" title="JWT的数据结构"></a>JWT的数据结构</h2><p>典型的：改对象为一个很长的字符串，字符之间通过 “ . ”分割为三个子串。</p><p>注意：JWT对象为一个长字串，各子串之间也没有换行符。</p><p>每一个子串表示一个功能块：JWT头、有效载荷、签名 </p><p><img src="/images/JWT%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.webp" alt="30174043_63d7909b0ca6171543"></p><h3 id="JWT头"><a href="#JWT头" class="headerlink" title="JWT头"></a>JWT头</h3><p>描述JWT元数据的JSON对象：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span><span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span><span class="comment">//表示签名使用的算法，默认为HS256</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;JWT&quot;</span><span class="comment">//表示令牌的类型，JWT令牌统一写为JWT</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</p><h3 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h3><p>JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。</p><p>JWT指定七个默认字段供选择：</p><ol><li>iss：发行人</li><li>exp：到期时间</li><li>sub：主题</li><li>aud：用户</li><li>nbf：在此之前不可以</li><li>iat：发布时间</li><li>jtl：JWT ID用于标识该JWT</li></ol><p>除了以上字段外，我们还可以自定义私有字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄漏。</p><p>JSON对象也使用Base64 URL算法转换为字符串存。</p><h2 id="JWT的用法"><a href="#JWT的用法" class="headerlink" title="JWT的用法"></a>JWT的用法</h2><p>客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中</p><p>此后，客户端将在与服务器交互中会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域，因此一般将它放入HTTP请求的Header Authorization字段中。</p><p>Authorization：Bearer</p><p>当跨域时，也可以将JWT被放置于POST请求的数据主体中。</p><h2 id="JWT问题和趋势"><a href="#JWT问题和趋势" class="headerlink" title="JWT问题和趋势"></a>JWT问题和趋势</h2><ol><li>JWT默认不加密，但可以加密。生成原始令牌后，可以使用改令牌再次进行加密。</li><li>当JWT未加密方法时，一些私密数据无法通过JWT传输</li><li>JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。</li><li>JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。</li><li>JWT本身包含认证信息，因此一旦信息泄漏，任何人都可以获取令牌的所有权限，为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行身份验证。</li><li>为了减少被盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</li></ol><h2 id="JWT的基本使用"><a href="#JWT的基本使用" class="headerlink" title="JWT的基本使用"></a>JWT的基本使用</h2><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> yui.ui.web.sys.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * APP登录Token的生成和解析</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** token秘钥，请勿泄露，请勿随便修改 backups:JKKLJOoasdlfj */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;JKKLJOoasdlfj&quot;</span>;</span><br><span class="line">    <span class="comment">/** token 过期时间: 10天 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">calendarField</span> <span class="operator">=</span> Calendar.DATE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">calendarInterval</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT生成Token.&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * JWT构成: header, payload, signature</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user_id</span></span><br><span class="line"><span class="comment">     *            登录成功后用户user_id, 参数user_id不可传空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Long user_id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">iatDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">// expire time</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">nowTime</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        nowTime.add(calendarField, calendarInterval);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiresDate</span> <span class="operator">=</span> nowTime.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// header Map</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build token</span></span><br><span class="line">        <span class="comment">// param backups &#123;iss:Service, aud:APP&#125;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create().withHeader(map) <span class="comment">// header</span></span><br><span class="line">                .withClaim(<span class="string">&quot;iss&quot;</span>, <span class="string">&quot;Service&quot;</span>) <span class="comment">// payload</span></span><br><span class="line">                .withClaim(<span class="string">&quot;aud&quot;</span>, <span class="string">&quot;APP&quot;</span>).withClaim(<span class="string">&quot;user_id&quot;</span>, <span class="literal">null</span> == user_id ? <span class="literal">null</span> : user_id.toString())</span><br><span class="line">                .withIssuedAt(iatDate) <span class="comment">// sign time</span></span><br><span class="line">                .withExpiresAt(expiresDate) <span class="comment">// expire time</span></span><br><span class="line">                .sign(Algorithm.HMAC256(SECRET)); <span class="comment">// signature</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密Token</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Claim&gt; <span class="title function_">verifyToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(SECRET)).build();</span><br><span class="line">            jwt = verifier.verify(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            <span class="comment">// token 校验失败, 抛出Token验证非法异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jwt.getClaims();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Token获取user_id</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user_id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getAppUID</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        Map&lt;String, Claim&gt; claims = verifyToken(token);</span><br><span class="line">        <span class="type">Claim</span> <span class="variable">user_id_claim</span> <span class="operator">=</span> claims.get(<span class="string">&quot;user_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == user_id_claim || StringUtils.isEmpty(user_id_claim.asString())) &#123;</span><br><span class="line">            <span class="comment">// token 校验失败, 抛出Token验证非法异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(user_id_claim.asString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终存放的数据在JWT内部的实体claims里，它是存放数据的地方。</p><h2 id="JJWT"><a href="#JJWT" class="headerlink" title="JJWT"></a>JJWT</h2><p>它是为了更友好在JVM上使用JWT，是基于JWT，JWS，JWE，JWK框架的java实现。</p><p>参考：<a href="https://github.com/jwtk/jwwt">github地址</a></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建JwtConstants类，用于token的chaims保存有效信息字段名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> finals <span class="type">String</span> <span class="variable">JWT_KEY_USER_ID</span> <span class="operator">=</span> <span class="string">&quot;uid&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建JwtInfo类，用于token的chaims保存有效信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtInfo</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUid</span><span class="params">(String uid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建JwtTokenUtils工具类，用于token的生成和解析</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JWT（JSON web Token）目前最流行的跨域身份验证解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流行&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;稳定&lt;/li&gt;
&lt;li&gt;易用&lt;/li&gt;
&lt;li&gt;支持JSON&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="JWT" scheme="http://example.com/tags/JWT/"/>
    
  </entry>
  
</feed>
